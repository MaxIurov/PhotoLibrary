@model PhotoLibrary.Models.ViewModels.PhotoViewModel
@using PhotoLibrary.Helpers;
@using PhotoLibrary.Models.ViewModels;
@{
    ViewBag.Title = "Edit";
}
<h2>Edit Photo</h2>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <h4>Photo</h4>
        <hr />
        @Html.ValidationSummary(true, "Validation summary failed.", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.PhotoID)
        @Html.HiddenFor(m => m.UserID)

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Image, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.Image(Model.Name, Model.Image, 1)
                @Html.HiddenFor(model => model.Image)
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.TimeTaken, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@{Html.EnableClientValidation(false);}
                @Html.EditorFor(model => model.TimeTaken, new { htmlAttributes = new { @class = "form-control" } })
                @{Html.EnableClientValidation(true);}
                @Html.ValidationMessageFor(model => model.TimeTaken, "", new { @class = "text-danger" })*@
                <div class='input-group date' id='datepickertimetaken'>
                    <input type='text' name='TimeTakenStr' id='TimeTakenStr' class="form-control" />
                    <span class="input-group-addon">
                        <span class="glyphicon glyphicon-calendar">
                        </span>
                    </span>
                </div>
                @Html.HiddenFor(model => model.TimeTaken)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Location, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Location, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Device", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(m => m.DeviceID, Model.DeviceList, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.DeviceID, "Wrong Device", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Focus, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Focus, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Focus, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Aperture, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Aperture, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Aperture, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Shutter, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Shutter, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Shutter, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ISO, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ISO, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ISO, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Flash, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.Flash)
                    @Html.ValidationMessageFor(model => model.Flash, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Albums, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @for (int i = 0; i < Model.Albums.Count(); i++)
                {
                    <div>
                        @Html.EditorFor(m => Model.Albums[i].Checked)
                        @Html.DisplayFor(m => Model.Albums[i].Name)
                        @Html.HiddenFor(m => Model.Albums[i].Id)
                    </div>
                }
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}
<div>
    @Html.MyLinkButton("Back to List", "Index", "Photos")
</div>
<script type="text/javascript">
        $(function () {
            $('#datepickertimetaken').datetimepicker({
                viewMode: 'years',
                format: 'DD.MM.YYYY HH:mm',
                showClear: true,
                showClose: true
            });
            $('#datepickertimetaken').data("DateTimePicker").defaultDate(@Html.Raw(Json.Encode(Model.TimeTakenStr)));
        });
</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
